{"version":3,"file":"index.mjs","sources":["../lib/search.js","../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cdf from '@stdlib/stats-base-dists-negative-binomial-cdf' ;\n\n\n// VARIABLES //\n\nvar methods;\n\n\n// FUNCTIONS //\n\n/**\n* Performs a search to the left.\n*\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} k - probability\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `k` quantile of the specified distribution\n*/\nfunction searchLeft( x, k, r, p ) {\n\twhile ( true ) {\n\t\tif ( x === 0 || cdf( x - 1.0, r, p ) < k ) {\n\t\t\treturn x;\n\t\t}\n\t\tx -= 1;\n\t}\n}\n\n/**\n* Performs a search to the right.\n*\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} k - probability\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `k` quantile of the specified distribution\n*/\nfunction searchRight( x, k, r, p ) {\n\twhile ( true ) {\n\t\tx += 1;\n\t\tif ( cdf( x, r, p ) >= k ) {\n\t\t\treturn x;\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\nmethods = {\n\t'left': searchLeft,\n\t'right': searchRight\n};\n\n\n// EXPORTS //\n\nexport default methods;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cdf from '@stdlib/stats-base-dists-negative-binomial-cdf' ;\nimport erfcinv from '@stdlib/math-base-special-erfcinv' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport round from '@stdlib/math-base-special-round' ;\nimport sqrt from '@stdlib/math-base-special-sqrt' ;\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport search from './search.js' ;\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a probability `k`.\n*\n* @param {Probability} k - input value\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.9, 20.0, 0.2 );\n* // returns 106\n*\n* @example\n* var y = quantile( 0.9, 20.0, 0.8 );\n* // returns 8\n*\n* @example\n* var y = quantile( 0.5, 10.0, 0.4 );\n* // returns 14\n*\n* @example\n* var y = quantile( 0.0, 10.0, 0.9 );\n* // returns 0\n*\n* @example\n* var y = quantile( 1.1, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.1, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, 1.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, NaN );\n* // returns NaN\n*/\nfunction quantile( k, r, p ) {\n\tvar sigmaInv;\n\tvar guess;\n\tvar sigma;\n\tvar corr;\n\tvar mu;\n\tvar x2;\n\tvar x;\n\tvar q;\n\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tisnan( k ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\tk < 0.0 ||\n\t\tk > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( k === 1.0 ) {\n\t\treturn PINF;\n\t}\n\tq = 1.0 - p;\n\tmu = ( r * q ) / p;\n\tsigma = sqrt( r * q ) / p;\n\tsigmaInv = 1.0 / sigma;\n\n\t// Cornish-Fisher expansion:\n\tif ( k < 0.5 ) {\n\t\tx = -erfcinv( 2.0 * k ) * SQRT2;\n\t} else {\n\t\tx = erfcinv( 2.0 * (1.0-k) ) * SQRT2;\n\t}\n\tx2 = x * x;\n\n\t// Skewness correction:\n\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\tguess = round( mu + (sigma * corr) );\n\treturn ( cdf( guess, r, p ) >= k ) ?\n\t\tsearch.left( guess, k, r, p ) :\n\t\tsearch.right( guess, k, r, p );\n}\n\n\n// EXPORTS //\n\nexport default quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function' ;\nimport cdf from '@stdlib/stats-base-dists-negative-binomial-cdf' ;\nimport erfcinv from '@stdlib/math-base-special-erfcinv' ;\nimport isnan from '@stdlib/math-base-assert-is-nan' ;\nimport round from '@stdlib/math-base-special-round' ;\nimport sqrt from '@stdlib/math-base-special-sqrt' ;\nimport SQRT2 from '@stdlib/constants-float64-sqrt-two' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport search from './search.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 0.5 );\n* var y = quantile( 0.1 );\n* // returns 5\n*\n* y = quantile( 0.9 );\n* // returns 16\n*/\nfunction factory( r, p ) {\n\tvar sigmaInv;\n\tvar sigma;\n\tvar mu;\n\tvar q;\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tq = 1.0 - p;\n\tmu = ( r * q ) / p;\n\tsigma = sqrt( r * q ) / p;\n\tsigmaInv = ( (2.0/p) - 1.0 ) / sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {Probability} k - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( k ) {\n\t\tvar guess;\n\t\tvar corr;\n\t\tvar x2;\n\t\tvar x;\n\n\t\tif ( isnan( k ) || k < 0.0 || k > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( k === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( k === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\n\t\t// Cornish-Fisher expansion:\n\t\tif ( k < 0.5 ) {\n\t\t\tx = -erfcinv( 2.0 * k ) * SQRT2;\n\t\t} else {\n\t\t\tx = erfcinv( 2.0 * (1.0-k) ) * SQRT2;\n\t\t}\n\t\tx2 = x * x;\n\n\t\t// Skewness correction:\n\t\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\t\tguess = round( mu + (sigma * corr) );\n\t\treturn ( cdf( guess, r, p ) >= k ) ?\n\t\t\tsearch.left( guess, k, r, p ) :\n\t\t\tsearch.right( guess, k, r, p );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-negative-binomial-quantile\n*\n* @example\n* import quantile from '@stdlib/stats-base-dists-negative-binomial-quantile' ;\n*\n* var y = quantile( 0.9, 20.0, 0.2 );\n* // returns 106\n*\n* y = quantile( 0.9, 20.0, 0.8 );\n* // returns 8\n*\n* var myquantile = quantile.factory( 10.0, 0.5 );\n* y = myquantile( 0.1 );\n* // returns 5\n*\n* y = myquantile( 0.9 );\n* // returns 16\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["search","left","x","k","r","p","cdf","right","quantile","sigmaInv","guess","sigma","mu","q","isnan","NaN","PINF","sqrt","erfcinv","SQRT2","round","factory","constantFunction","setReadOnly","main"],"mappings":";;k2BA+EA,IAAAA,EARU,CACTC,KA/BD,SAAqBC,EAAGC,EAAGC,EAAGC,GAC7B,OAAe,CACd,GAAW,IAANH,GAAWI,EAAKJ,EAAI,EAAKE,EAAGC,GAAMF,EACtC,OAAOD,EAERA,GAAK,CACL,CACF,EAyBCK,MAdD,SAAsBL,EAAGC,EAAGC,EAAGC,GAC9B,OAEC,GAAKC,EADLJ,GAAK,EACQE,EAAGC,IAAOF,EACtB,OAAOD,CAGV,GC4BA,SAASM,EAAUL,EAAGC,EAAGC,GACxB,IAAII,EACAC,EACAC,EAEAC,EAEAV,EACAW,EAEJ,OACCC,EAAOV,IACPU,EAAOT,IACPS,EAAOX,IACPC,GAAK,GACLC,EAAI,GACJA,EAAI,GACJF,EAAI,GACJA,EAAI,EAEGY,IAEG,IAANZ,EACG,EAEG,IAANA,EACGa,GAGRJ,EAAOR,GADPS,EAAI,EAAMR,GACOA,EAEjBI,EAAW,GADXE,EAAQM,EAAMb,EAAIS,GAAMR,GAKvBH,EADIC,EAAI,IACHe,EAAS,EAAMf,GAAMgB,EAEtBD,EAAS,GAAO,EAAIf,IAAOgB,EAMhCT,EAAQU,EAAOR,EAAMD,GADdT,EAAKO,GAHPP,EAAIA,EAGqB,GAAQ,IAE7BI,EAAKI,EAAON,EAAGC,IAAOF,EAC9BH,EAAOC,KAAMS,EAAOP,EAAGC,EAAGC,GAC1BL,EAAOO,MAAOG,EAAOP,EAAGC,EAAGC,GAC7B,CC3FA,SAASgB,EAASjB,EAAGC,GACpB,IAAII,EACAE,EACAC,EACAC,EACJ,OACCC,EAAOV,IACPU,EAAOT,IACPD,GAAK,GACLC,EAAI,GACJA,EAAI,EAEGiB,EAAkBP,MAG1BH,EAAOR,GADPS,EAAI,EAAMR,GACOA,EACjBM,EAAQM,EAAMb,EAAIS,GAAMR,EACxBI,GAAc,EAAIJ,EAAK,GAAQM,EAc/B,SAAmBR,GAClB,IAAIO,EAGAR,EAEJ,GAAKY,EAAOX,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOY,IAER,GAAW,IAANZ,EACJ,OAAO,EAER,GAAW,IAANA,EACJ,OAAOa,EAKPd,EADIC,EAAI,IACHe,EAAS,EAAMf,GAAMgB,EAEtBD,EAAS,GAAO,EAAIf,IAAOgB,EAOhC,OADAT,EAAQU,EAAOR,EAAMD,GADdT,EAAKO,GAHPP,EAAIA,EAGqB,GAAQ,IAE7BI,EAAKI,EAAON,EAAGC,IAAOF,EAC9BH,EAAOC,KAAMS,EAAOP,EAAGC,EAAGC,GAC1BL,EAAOO,MAAOG,EAAOP,EAAGC,EAAGC,EAC5B,EACF,CC7DAkB,EAAAC,EAAA,UAAAH"}