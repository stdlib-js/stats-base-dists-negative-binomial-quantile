{"version":3,"file":"index.mjs","sources":["../lib/search.js","../lib/quantile.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar cdf = require( '@stdlib/stats-base-dists-negative-binomial-cdf' );\n\n\n// VARIABLES //\n\nvar methods;\n\n\n// FUNCTIONS //\n\n/**\n* Performs a search to the left.\n*\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} k - probability\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `k` quantile of the specified distribution\n*/\nfunction searchLeft( x, k, r, p ) {\n\twhile ( true ) {\n\t\tif ( x === 0 || cdf( x - 1.0, r, p ) < k ) {\n\t\t\treturn x;\n\t\t}\n\t\tx -= 1;\n\t}\n}\n\n/**\n* Performs a search to the right.\n*\n* @param {NonNegativeInteger} x - starting guess\n* @param {Probability} k - probability\n* @param {PositiveNumber} r - number of failures until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} `k` quantile of the specified distribution\n*/\nfunction searchRight( x, k, r, p ) {\n\twhile ( true ) {\n\t\tx += 1;\n\t\tif ( cdf( x, r, p ) >= k ) {\n\t\t\treturn x;\n\t\t}\n\t}\n}\n\n\n// MAIN //\n\nmethods = {\n\t'left': searchLeft,\n\t'right': searchRight\n};\n\n\n// EXPORTS //\n\nmodule.exports = methods;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar cdf = require( '@stdlib/stats-base-dists-negative-binomial-cdf' );\nvar erfcinv = require( '@stdlib/math-base-special-erfcinv' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar round = require( '@stdlib/math-base-special-round' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar SQRT2 = require( '@stdlib/constants-float64-sqrt-two' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar search = require( './search.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p` at a probability `k`.\n*\n* @param {Probability} k - input value\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {NonNegativeInteger} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.9, 20.0, 0.2 );\n* // returns 106\n*\n* @example\n* var y = quantile( 0.9, 20.0, 0.8 );\n* // returns 8\n*\n* @example\n* var y = quantile( 0.5, 10.0, 0.4 );\n* // returns 14\n*\n* @example\n* var y = quantile( 0.0, 10.0, 0.9 );\n* // returns 0\n*\n* @example\n* var y = quantile( 1.1, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.1, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, 1.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.3, 20.0, NaN );\n* // returns NaN\n*/\nfunction quantile( k, r, p ) {\n\tvar sigmaInv;\n\tvar guess;\n\tvar sigma;\n\tvar corr;\n\tvar mu;\n\tvar x2;\n\tvar x;\n\tvar q;\n\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tisnan( k ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\tk < 0.0 ||\n\t\tk > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( k === 1.0 ) {\n\t\treturn PINF;\n\t}\n\tq = 1.0 - p;\n\tmu = ( r * q ) / p;\n\tsigma = sqrt( r * q ) / p;\n\tsigmaInv = 1.0 / sigma;\n\n\t// Cornish-Fisher expansion:\n\tif ( k < 0.5 ) {\n\t\tx = -erfcinv( 2.0 * k ) * SQRT2;\n\t} else {\n\t\tx = erfcinv( 2.0 * (1.0-k) ) * SQRT2;\n\t}\n\tx2 = x * x;\n\n\t// Skewness correction:\n\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\tguess = round( mu + (sigma * corr) );\n\treturn ( cdf( guess, r, p ) >= k ) ?\n\t\tsearch.left( guess, k, r, p ) :\n\t\tsearch.right( guess, k, r, p );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar cdf = require( '@stdlib/stats-base-dists-negative-binomial-cdf' );\nvar erfcinv = require( '@stdlib/math-base-special-erfcinv' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar round = require( '@stdlib/math-base-special-round' );\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar SQRT2 = require( '@stdlib/constants-float64-sqrt-two' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar search = require( './search.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 0.5 );\n* var y = quantile( 0.1 );\n* // returns 5\n*\n* y = quantile( 0.9 );\n* // returns 16\n*/\nfunction factory( r, p ) {\n\tvar sigmaInv;\n\tvar sigma;\n\tvar mu;\n\tvar q;\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tq = 1.0 - p;\n\tmu = ( r * q ) / p;\n\tsigma = sqrt( r * q ) / p;\n\tsigmaInv = ( (2.0/p) - 1.0 ) / sigma;\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {Probability} k - input value\n\t* @returns {NonNegativeInteger} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( k ) {\n\t\tvar guess;\n\t\tvar corr;\n\t\tvar x2;\n\t\tvar x;\n\n\t\tif ( isnan( k ) || k < 0.0 || k > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( k === 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( k === 1.0 ) {\n\t\t\treturn PINF;\n\t\t}\n\n\t\t// Cornish-Fisher expansion:\n\t\tif ( k < 0.5 ) {\n\t\t\tx = -erfcinv( 2.0 * k ) * SQRT2;\n\t\t} else {\n\t\t\tx = erfcinv( 2.0 * (1.0-k) ) * SQRT2;\n\t\t}\n\t\tx2 = x * x;\n\n\t\t// Skewness correction:\n\t\tcorr = x + (sigmaInv * ( x2 - 1.0 ) / 6.0);\n\t\tguess = round( mu + (sigma * corr) );\n\t\treturn ( cdf( guess, r, p ) >= k ) ?\n\t\t\tsearch.left( guess, k, r, p ) :\n\t\t\tsearch.right( guess, k, r, p );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-negative-binomial-quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats-base-dists-negative-binomial-quantile' );\n*\n* var y = quantile( 0.9, 20.0, 0.2 );\n* // returns 106\n*\n* y = quantile( 0.9, 20.0, 0.8 );\n* // returns 8\n*\n* var myquantile = quantile.factory( 10.0, 0.5 );\n* y = myquantile( 0.1 );\n* // returns 5\n*\n* y = myquantile( 0.9 );\n* // returns 16\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar quantile = require( './quantile.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n"],"names":["methods","cdf","require$$0","left","x","k","r","p","right","erfcinv","require$$1","isnan","require$$2","round","require$$3","sqrt","require$$4","SQRT2","require$$5","PINF","require$$6","search","constantFunction","require$$7","quantile","sigmaInv","guess","sigma","mu","q","NaN","factory","lib"],"mappings":";;21BAsBA,IAKIA,EALAC,EAAMC,EAiDVF,EAAU,CACTG,KA/BD,SAAqBC,EAAGC,EAAGC,EAAGC,GAC7B,OAAe,CACd,GAAW,IAANH,GAAWH,EAAKG,EAAI,EAAKE,EAAGC,GAAMF,EACtC,OAAOD,EAERA,GAAK,IA2BNI,MAdD,SAAsBJ,EAAGC,EAAGC,EAAGC,GAC9B,OAEC,GAAKN,EADLG,GAAK,EACQE,EAAGC,IAAOF,EACtB,OAAOD,IAgBV,ICzDIH,EAAMC,EACNO,EAAUC,EACVC,EAAQC,EACRC,EAAQC,EACRC,EAAOC,EACPC,EAAQC,EACRC,EAAOC,EACPC,EDkDarB,ECmEjB,IC5HIsB,EAAmBpB,EACnBD,EAAMS,EACND,EAAUG,EACVD,EAAQG,EACRD,EAAQG,EACRD,EAAOG,EACPD,EAAQG,EACRD,EAAOI,EACPF,EFiDarB,EEsCjB,ICxEAwB,EFiDA,SAAmBnB,EAAGC,EAAGC,GACxB,IAAIkB,EACAC,EACAC,EAEAC,EAEAxB,EACAyB,EAEJ,OACClB,EAAOL,IACPK,EAAOJ,IACPI,EAAON,IACPC,GAAK,GACLC,EAAI,GACJA,EAAI,GACJF,EAAI,GACJA,EAAI,EAEGyB,IAEG,IAANzB,EACG,EAEG,IAANA,EACGc,GAGRS,EAAOtB,GADPuB,EAAI,EAAMtB,GACOA,EAEjBkB,EAAW,GADXE,EAAQZ,EAAMT,EAAIuB,GAAMtB,GAKvBH,EADIC,EAAI,IACHI,EAAS,EAAMJ,GAAMY,EAEtBR,EAAS,GAAO,EAAIJ,IAAOY,EAMhCS,EAAQb,EAAOe,EAAMD,GADdvB,EAAKqB,GAHPrB,EAAIA,EAGqB,GAAQ,IAE7BH,EAAKyB,EAAOpB,EAAGC,IAAOF,EAC9BgB,EAAOlB,KAAMuB,EAAOrB,EAAGC,EAAGC,GAC1Bc,EAAOb,MAAOkB,EAAOrB,EAAGC,EAAGC,KE9F7BwB,EDIA,SAAkBzB,EAAGC,GACpB,IAAIkB,EACAE,EACAC,EACAC,EACJ,OACClB,EAAOL,IACPK,EAAOJ,IACPD,GAAK,GACLC,EAAI,GACJA,EAAI,EAEGe,EAAkBQ,MAG1BF,EAAOtB,GADPuB,EAAI,EAAMtB,GACOA,EACjBoB,EAAQZ,EAAMT,EAAIuB,GAAMtB,EACxBkB,GAAc,EAAIlB,EAAK,GAAQoB,EAc/B,SAAmBtB,GAClB,IAAIqB,EAGAtB,EAEJ,GAAKO,EAAON,IAAOA,EAAI,GAAOA,EAAI,EACjC,OAAOyB,IAER,GAAW,IAANzB,EACJ,OAAO,EAER,GAAW,IAANA,EACJ,OAAOc,EAKPf,EADIC,EAAI,IACHI,EAAS,EAAMJ,GAAMY,EAEtBR,EAAS,GAAO,EAAIJ,IAAOY,EAOhC,OADAS,EAAQb,EAAOe,EAAMD,GADdvB,EAAKqB,GAHPrB,EAAIA,EAGqB,GAAQ,IAE7BH,EAAKyB,EAAOpB,EAAGC,IAAOF,EAC9BgB,EAAOlB,KAAMuB,EAAOrB,EAAGC,EAAGC,GAC1Bc,EAAOb,MAAOkB,EAAOrB,EAAGC,EAAGC,MClE9BL,EAOAsB,EAAA,UAAAO,GAKA,IAAAC,EAAAR"}